name: Deploy eShop Infrastructure

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infra/**'
  pull_request:
    branches:
      - main
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      enable_openai:
        description: 'Enable OpenAI Integration'
        required: false
        default: false
        type: boolean
      enable_zone_redundancy:
        description: 'Enable Zone Redundancy'
        required: false
        default: false
        type: boolean

env:
  AZURE_LOCATION: 'East US'
  NAME_PREFIX: 'eshop'

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install Bicep
      run: |
        az bicep install
        az bicep version

    - name: Lint Bicep Templates
      working-directory: ./infra
      run: |
        echo "Linting Bicep templates..."
        az bicep build --file main.bicep --stdout > /dev/null
        echo "Bicep templates are valid"

    - name: Determine Environment
      id: environment
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "enable_openai=${{ github.event.inputs.enable_openai }}" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=${{ github.event.inputs.enable_zone_redundancy }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "enable_openai=true" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "enable_openai=false" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=false" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "enable_openai=false" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Resource Group
      run: |
        RESOURCE_GROUP="rg-${{ env.NAME_PREFIX }}-${{ steps.environment.outputs.environment }}"
        
        if ! az group show --name "$RESOURCE_GROUP" > /dev/null 2>&1; then
          echo "Creating resource group $RESOURCE_GROUP..."
          az group create --name "$RESOURCE_GROUP" --location "${{ env.AZURE_LOCATION }}"
        else
          echo "Resource group $RESOURCE_GROUP already exists"
        fi

    - name: Validate Deployment
      working-directory: ./infra
      run: |
        RESOURCE_GROUP="rg-${{ env.NAME_PREFIX }}-${{ steps.environment.outputs.environment }}"
        
        # Build parameters
        PARAMS="environmentName=${{ steps.environment.outputs.environment }}"
        PARAMS="$PARAMS namePrefix=${{ env.NAME_PREFIX }}"
        PARAMS="$PARAMS enableOpenAI=${{ steps.environment.outputs.enable_openai }}"
        PARAMS="$PARAMS enableZoneRedundancy=${{ steps.environment.outputs.enable_zone_redundancy }}"
        
        echo "Validating deployment with parameters: $PARAMS"
        az deployment group validate \
          --resource-group "$RESOURCE_GROUP" \
          --template-file main.bicep \
          --parameters $PARAMS

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'
    environment: 
      name: ${{ needs.validate.outputs.environment || 'dev' }}
      url: ${{ steps.deploy.outputs.web_app_url }}
    
    outputs:
      web_app_url: ${{ steps.deploy.outputs.web_app_url }}
      mobile_bff_url: ${{ steps.deploy.outputs.mobile_bff_url }}
      acr_login_server: ${{ steps.deploy.outputs.acr_login_server }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install Bicep
      run: |
        az bicep install

    - name: Determine Environment
      id: environment
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "enable_openai=${{ github.event.inputs.enable_openai }}" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=${{ github.event.inputs.enable_zone_redundancy }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "enable_openai=true" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "enable_openai=false" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=false" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "enable_openai=false" >> $GITHUB_OUTPUT
          echo "enable_zone_redundancy=false" >> $GITHUB_OUTPUT
        fi

    - name: Deploy Infrastructure
      id: deploy
      working-directory: ./infra
      run: |
        RESOURCE_GROUP="rg-${{ env.NAME_PREFIX }}-${{ steps.environment.outputs.environment }}"
        DEPLOYMENT_NAME="eshop-infrastructure-$(date +%Y%m%d-%H%M%S)"
        
        echo "Starting deployment: $DEPLOYMENT_NAME"
        
        # Build parameters
        PARAMS="environmentName=${{ steps.environment.outputs.environment }}"
        PARAMS="$PARAMS namePrefix=${{ env.NAME_PREFIX }}"
        PARAMS="$PARAMS enableOpenAI=${{ steps.environment.outputs.enable_openai }}"
        PARAMS="$PARAMS enableZoneRedundancy=${{ steps.environment.outputs.enable_zone_redundancy }}"
        
        # Add container registry if available
        if [ -n "${{ vars.CONTAINER_REGISTRY_SERVER }}" ]; then
          PARAMS="$PARAMS acrLoginServer=${{ vars.CONTAINER_REGISTRY_SERVER }}"
        fi
        
        # Add OpenAI parameters if enabled and secrets are available
        if [ "${{ steps.environment.outputs.enable_openai }}" = "true" ]; then
          if [ -n "${{ secrets.OPENAI_ENDPOINT }}" ]; then
            PARAMS="$PARAMS openAIEndpoint=${{ secrets.OPENAI_ENDPOINT }}"
          fi
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            PARAMS="$PARAMS openAIApiKey=${{ secrets.OPENAI_API_KEY }}"
          fi
        fi

        echo "Deploying with parameters: ${PARAMS//openAIApiKey=*/openAIApiKey=***}"

        # Deploy infrastructure
        az deployment group create \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --template-file main.bicep \
          --parameters $PARAMS \
          --verbose

        # Get deployment outputs
        echo "Deployment completed. Retrieving outputs..."
        WEB_APP_URL=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query "properties.outputs.webAppUrl.value" \
          --output tsv)

        MOBILE_BFF_URL=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query "properties.outputs.mobileBffUrl.value" \
          --output tsv)

        ACR_LOGIN_SERVER=$(az deployment group show \
          --resource-group "$RESOURCE_GROUP" \
          --name "$DEPLOYMENT_NAME" \
          --query "properties.outputs.containerRegistryLoginServer.value" \
          --output tsv)

        echo "web_app_url=$WEB_APP_URL" >> $GITHUB_OUTPUT
        echo "mobile_bff_url=$MOBILE_BFF_URL" >> $GITHUB_OUTPUT
        echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

        echo "Infrastructure deployment completed successfully!"
        echo "Web App URL: $WEB_APP_URL"
        echo "Mobile BFF URL: $MOBILE_BFF_URL"
        echo "Container Registry: $ACR_LOGIN_SERVER"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Determine Environment
      id: environment
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Check Infrastructure Health
      run: |
        RESOURCE_GROUP="rg-${{ env.NAME_PREFIX }}-${{ steps.environment.outputs.environment }}"
        
        echo "Checking infrastructure health for environment: ${{ steps.environment.outputs.environment }}"
        
        # Check Container Apps Environment
        echo "Checking Container Apps Environment..."
        CAE_STATE=$(az containerapp env show \
          --name "${{ env.NAME_PREFIX }}-cae-${{ steps.environment.outputs.environment }}" \
          --resource-group "$RESOURCE_GROUP" \
          --query "properties.provisioningState" \
          --output tsv)
        
        if [ "$CAE_STATE" != "Succeeded" ]; then
          echo "❌ Container Apps Environment is not in Succeeded state: $CAE_STATE"
          exit 1
        else
          echo "✅ Container Apps Environment is healthy"
        fi
        
        # Check PostgreSQL Server
        echo "Checking PostgreSQL Server..."
        PG_STATE=$(az postgres flexible-server show \
          --name "${{ env.NAME_PREFIX }}-postgres-${{ steps.environment.outputs.environment }}" \
          --resource-group "$RESOURCE_GROUP" \
          --query "state" \
          --output tsv)
        
        if [ "$PG_STATE" != "Ready" ]; then
          echo "❌ PostgreSQL server is not ready: $PG_STATE"
          exit 1
        else
          echo "✅ PostgreSQL server is healthy"
        fi
        
        # Check Redis Cache
        echo "Checking Redis Cache..."
        REDIS_STATE=$(az redis show \
          --name "${{ env.NAME_PREFIX }}-redis-${{ steps.environment.outputs.environment }}" \
          --resource-group "$RESOURCE_GROUP" \
          --query "provisioningState" \
          --output tsv)
        
        if [ "$REDIS_STATE" != "Succeeded" ]; then
          echo "❌ Redis cache is not in Succeeded state: $REDIS_STATE"
          exit 1
        else
          echo "✅ Redis cache is healthy"
        fi
        
        # Check Service Bus
        echo "Checking Service Bus..."
        SB_STATE=$(az servicebus namespace show \
          --name "${{ env.NAME_PREFIX }}-sb-${{ steps.environment.outputs.environment }}" \
          --resource-group "$RESOURCE_GROUP" \
          --query "provisioningState" \
          --output tsv)
        
        if [ "$SB_STATE" != "Succeeded" ]; then
          echo "❌ Service Bus is not in Succeeded state: $SB_STATE"
          exit 1
        else
          echo "✅ Service Bus is healthy"
        fi
        
        echo "🎉 All infrastructure components are healthy!"

    - name: Create Summary
      run: |
        echo "## Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ steps.environment.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Web App | [${{ needs.deploy.outputs.web_app_url }}](${{ needs.deploy.outputs.web_app_url }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Mobile BFF | [${{ needs.deploy.outputs.mobile_bff_url }}](${{ needs.deploy.outputs.mobile_bff_url }}) |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Registry | ${{ needs.deploy.outputs.acr_login_server }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All components deployed successfully!" >> $GITHUB_STEP_SUMMARY