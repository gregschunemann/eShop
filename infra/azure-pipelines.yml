# Azure DevOps Pipeline for eShop Infrastructure Deployment
# This pipeline deploys the eShop Azure infrastructure using Bicep templates

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - infra/*

pr:
  branches:
    include:
    - main
  paths:
    include:
    - infra/*

parameters:
- name: environment
  displayName: 'Target Environment'
  type: string
  default: 'dev'
  values:
  - dev
  - staging
  - prod

- name: enableOpenAI
  displayName: 'Enable OpenAI Integration'
  type: boolean
  default: false

- name: enableZoneRedundancy
  displayName: 'Enable Zone Redundancy'
  type: boolean
  default: false

variables:
- group: eShop-Infrastructure-$(parameters.environment)
- name: resourceGroupName
  value: 'rg-eshop-$(parameters.environment)'
- name: location
  value: 'East US'
- name: namePrefix
  value: 'eshop'
- name: serviceConnectionName
  value: 'Azure-Service-Connection'

stages:
- stage: Validate
  displayName: 'Validate Infrastructure'
  jobs:
  - job: ValidateBicep
    displayName: 'Validate Bicep Templates'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Install Bicep'
      inputs:
        azureSubscription: '$(serviceConnectionName)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az bicep install
          az bicep version

    - task: AzureCLI@2
      displayName: 'Lint Bicep Templates'
      inputs:
        azureSubscription: '$(serviceConnectionName)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
        inlineScript: |
          echo "Linting Bicep templates..."
          az bicep build --file main.bicep --stdout > /dev/null
          echo "Bicep templates are valid"

    - task: AzureCLI@2
      displayName: 'Validate Deployment'
      inputs:
        azureSubscription: '$(serviceConnectionName)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/infra'
        inlineScript: |
          # Create resource group if it doesn't exist
          if ! az group show --name "$(resourceGroupName)" > /dev/null 2>&1; then
            echo "Creating resource group $(resourceGroupName)..."
            az group create --name "$(resourceGroupName)" --location "$(location)"
          fi

          # Validate deployment
          echo "Validating deployment..."
          az deployment group validate \
            --resource-group "$(resourceGroupName)" \
            --template-file main.bicep \
            --parameters \
              environmentName="${{ parameters.environment }}" \
              namePrefix="$(namePrefix)" \
              enableOpenAI=${{ parameters.enableOpenAI }} \
              enableZoneRedundancy=${{ parameters.enableZoneRedundancy }}

- stage: Deploy
  displayName: 'Deploy Infrastructure'
  dependsOn: Validate
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployInfrastructure
    displayName: 'Deploy to $(parameters.environment)'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'eShop-$(parameters.environment)'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Install Bicep'
            inputs:
              azureSubscription: '$(serviceConnectionName)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az bicep install

          - task: AzureCLI@2
            displayName: 'Deploy Infrastructure'
            inputs:
              azureSubscription: '$(serviceConnectionName)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: '$(Pipeline.Workspace)/s/infra'
              inlineScript: |
                # Create deployment name with timestamp
                DEPLOYMENT_NAME="eshop-infrastructure-$(date +%Y%m%d-%H%M%S)"
                
                echo "Starting deployment: $DEPLOYMENT_NAME"
                
                # Build parameters
                PARAMS="environmentName=${{ parameters.environment }}"
                PARAMS="$PARAMS namePrefix=$(namePrefix)"
                PARAMS="$PARAMS enableOpenAI=${{ parameters.enableOpenAI }}"
                PARAMS="$PARAMS enableZoneRedundancy=${{ parameters.enableZoneRedundancy }}"
                
                # Add container registry if available
                if [ -n "$(containerRegistryServer)" ]; then
                  PARAMS="$PARAMS acrLoginServer=$(containerRegistryServer)"
                fi
                
                # Add OpenAI parameters if enabled
                if [ "${{ parameters.enableOpenAI }}" = "true" ]; then
                  if [ -n "$(openAIEndpoint)" ]; then
                    PARAMS="$PARAMS openAIEndpoint=$(openAIEndpoint)"
                  fi
                  if [ -n "$(openAIApiKey)" ]; then
                    PARAMS="$PARAMS openAIApiKey=$(openAIApiKey)"
                  fi
                fi

                # Deploy infrastructure
                az deployment group create \
                  --resource-group "$(resourceGroupName)" \
                  --name "$DEPLOYMENT_NAME" \
                  --template-file main.bicep \
                  --parameters $PARAMS \
                  --verbose

                # Get deployment outputs
                echo "Deployment completed. Retrieving outputs..."
                az deployment group show \
                  --resource-group "$(resourceGroupName)" \
                  --name "$DEPLOYMENT_NAME" \
                  --query "properties.outputs" \
                  --output table

          - task: AzureCLI@2
            displayName: 'Set Pipeline Variables'
            inputs:
              azureSubscription: '$(serviceConnectionName)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get the latest deployment
                DEPLOYMENT_NAME=$(az deployment group list \
                  --resource-group "$(resourceGroupName)" \
                  --query "[?starts_with(name, 'eshop-infrastructure')] | max_by(@, &properties.timestamp).name" \
                  --output tsv)

                # Extract key outputs for use in subsequent stages
                WEB_APP_URL=$(az deployment group show \
                  --resource-group "$(resourceGroupName)" \
                  --name "$DEPLOYMENT_NAME" \
                  --query "properties.outputs.webAppUrl.value" \
                  --output tsv)

                MOBILE_BFF_URL=$(az deployment group show \
                  --resource-group "$(resourceGroupName)" \
                  --name "$DEPLOYMENT_NAME" \
                  --query "properties.outputs.mobileBffUrl.value" \
                  --output tsv)

                ACR_LOGIN_SERVER=$(az deployment group show \
                  --resource-group "$(resourceGroupName)" \
                  --name "$DEPLOYMENT_NAME" \
                  --query "properties.outputs.containerRegistryLoginServer.value" \
                  --output tsv)

                # Set as pipeline variables for downstream stages
                echo "##vso[task.setvariable variable=webAppUrl;isOutput=true]$WEB_APP_URL"
                echo "##vso[task.setvariable variable=mobileBffUrl;isOutput=true]$MOBILE_BFF_URL"
                echo "##vso[task.setvariable variable=acrLoginServer;isOutput=true]$ACR_LOGIN_SERVER"

                echo "Infrastructure deployment completed successfully!"
                echo "Web App URL: $WEB_APP_URL"
                echo "Mobile BFF URL: $MOBILE_BFF_URL"
                echo "Container Registry: $ACR_LOGIN_SERVER"

- stage: HealthCheck
  displayName: 'Health Check'
  dependsOn: Deploy
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: VerifyDeployment
    displayName: 'Verify Infrastructure Health'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Check Resource Health'
      inputs:
        azureSubscription: '$(serviceConnectionName)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Checking infrastructure health..."
          
          # Check Container Apps Environment
          CAE_STATE=$(az containerapp env show \
            --name "$(namePrefix)-cae-${{ parameters.environment }}" \
            --resource-group "$(resourceGroupName)" \
            --query "properties.provisioningState" \
            --output tsv)
          
          if [ "$CAE_STATE" != "Succeeded" ]; then
            echo "Container Apps Environment is not in Succeeded state: $CAE_STATE"
            exit 1
          fi
          
          # Check PostgreSQL Server
          PG_STATE=$(az postgres flexible-server show \
            --name "$(namePrefix)-postgres-${{ parameters.environment }}" \
            --resource-group "$(resourceGroupName)" \
            --query "state" \
            --output tsv)
          
          if [ "$PG_STATE" != "Ready" ]; then
            echo "PostgreSQL server is not ready: $PG_STATE"
            exit 1
          fi
          
          # Check Redis Cache
          REDIS_STATE=$(az redis show \
            --name "$(namePrefix)-redis-${{ parameters.environment }}" \
            --resource-group "$(resourceGroupName)" \
            --query "provisioningState" \
            --output tsv)
          
          if [ "$REDIS_STATE" != "Succeeded" ]; then
            echo "Redis cache is not in Succeeded state: $REDIS_STATE"
            exit 1
          fi
          
          echo "All infrastructure components are healthy!"